.transition-duration(@duration: 0.2s) {
    -moz-transition-duration: @duration;
    -webkit-transition-duration: @duration;
    -o-transition-duration: @duration;
    transition-duration: @duration;
}

.transition(@duration:0.2s, @ease:ease-out) {
    -webkit-transition: all @duration @ease;
    -moz-transition: all @duration @ease;
    -o-transition: all @duration @ease;
    transition: all @duration @ease;
}

.transform(...) {
    -webkit-transform: @arguments;
    -moz-transform: @arguments;
    -o-transform: @arguments;
    -ms-transform: @arguments;
    transform: @arguments;
}

.rotation(@deg:5deg) {
    .transform(rotate(@deg));
}

.scale(@ratio:1.5) {
    .transform(scale(@ratio));
}

.translate(@x:0, @y:0) {
   .transform(translate(@x, @y));
}
.rounded-corner (...) {
    border-radius: @arguments; 
}

.oval-corner (...) {
    border-radius: ~`"@{arguments}".replace(/[\[\]]/g, '').replace(/,/g, ' /')`; 
}

.rounded-corner-top (...) {
    border-top-left-radius: @arguments;
}

.rounded-corner-right (...) {
    border-top-right-radius: @arguments;
}

.rounded-corner-bottom (...) {
    border-bottom-right-radius: @arguments;
}

.rounded-corner-left (...) {
    border-bottom-left-radius: @arguments;
}
.muitl-box-shadow(@shadowA, @shadowB:X, ...){
    @props: ~`"@{arguments}".replace(/[\[\]]|\,\sX/g, '')`;
    box-shadow: @props;
}

.box-shadow(@shadow) {
    .muitl-box-shadow(@shadow);
}

/**
* @author: yuanzhen 
* @date: 15/01/08
* @desc: button
*/
.btn-base(){
    display: inline-block;
    border-radius: 2px;
    border: 1px solid transparent;
    text-decoration: none;
    &:link,
    &:visited,
    &:hover,
    &:active{
        text-decoration: none;
    }
}

@default: {
    .btn_default,
    .btn-default{
        color: @default-text;
        background: @default-bg;
        border-bottom-color: @default-border;
        &:hover,
        &:focus{
            @start: extract(@default-bg-hover, 1);
            @end: extract(@default-bg-hover, 2);
            #gradient .vertical(@start, @end, 0, 100%);
            border-bottom-color: @default-border-hover;
            color: @default-text;
        }
        &:visited{
            color: @default-text;
        }
        &:active{
            background: @default-bg-active;
            border-top-color: @default-border-active;
            .box-shadow(inset 0 1px 1px @default-shadow);
            color: @default-text;
        }
    }
};

@disable: {
    .btn_disable,
    .btn-disable{
        color: @disable-text;
        background: @disable-bg;
        border-color: @disable-border;
        &:hover,
        &:focus{
            background: @disable-bg;
            color: @disable-text;
        }
        &:visited{
            color: @disable-text;
        }
        &:active {
            background: @disable-bg;
            color: @disable-text;
        }
    }
};

@sub: {
    .btn_sub,
    .btn-sub {
        @start: extract(@sub-bg, 1);
        @end: extract(@sub-bg, 2);
        #gradient .vertical(@start, @end, 0, 100%);
        color: @sub-text;
        border-color: @sub-border;
        &:hover,
        &:focus {
            @start-hover: extract(@sub-bg-hover, 1);
            @end-hover: extract(@sub-bg-hover, 2);
            #gradient .vertical(@start-hover, @end-hover, 0, 100%);
            border-color: @sub-border-hover;
            color: @sub-text;
        }
        &:visited{
            color: @sub-text;
        }
        &:active {
            background: @sub-bg-active;
            border-top-color: @sub-border-active;
            .box-shadow(inset 0 1px 1px @sub-shadow);
            color: @sub-text;
        }
    }
};

@attention: {
    .btn_attention,
    .btn-attention {
        color: @attention-text;
        background: @attention-bg;
        border-bottom-color: @attention-border;
        &:hover,
        &:focus{
            @start: extract(@attention-bg-hover, 1);
            @end: extract(@attention-bg-hover, 2);
            #gradient .vertical(@start, @end, 0, 100%);
            border-bottom-color: @attention-border-hover;
            color: @attention-text;
        }
        &:visited{
            color: @attention-text;
        }
        &:active {
            background: @attention-bg-active;
            border-top-color: @attention-border-active; 
            .box-shadow(inset 0 1px 1px @attention-shadow);
            color: @attention-text;
        }
    }
};

@link: {
    .btn-link {
        color: @btn-link-text;
        &:hover,
        &:focus{
            color: @btn-link-text;
        }
        &:visited{
            color: @btn-link-text;
        }
        &:active {
            color: @btn-link-text;
        }
    }
};

@small: {
    .btn_small,
    .btn-small{
        padding: 4px 12px;
        font-size: 12px;
    }
};

@middle: {
    .btn_middle,
    .btn-middle {
        padding: 6px 12px;
        font-size: 12px;
    }
};

@larger: {
    .btn_larger,
    .btn-larger {
        padding: 8px 12px;
        font-size: 14px;
        .font-family-yahei();
    }
};

.make-btn-style() {
    .btn,
    .btn_default,
    .btn_sub,
    .btn_attention,
    .btn-default,
    .btn-sub,
    .btn-attention,
    .btn-link {
        cursor: pointer;
    }

    .btn_disable,
    .btn-disable,
    .btn-disabled{
        cursor: not-allowed;
    }

    .btn,
    .btn_default,
    .btn_sub,
    .btn_disable,
    .btn_attention,
    .btn-default,
    .btn-sub,
    .btn-disable,
    .btn-disabled,
    .btn-attention,
    .btn-link {
        .btn-base();
    }

    @default();
    @sub();
    @disable();
    @attention();
    @link();
}

.make-btn-size(){
    .btn_small,
    .btn_middle,
    .btn_larger,
    .btn-small,
    .btn-middle,
    .btn-larger{
        line-height: normal !important; //ff lineheight not work, input a button use padding
    }
    @small();
    @middle();
    @larger();
}

.btn-size(@padding-vertical, @padding-horizontal, @line-height, @font-size, @border-radius) {
     .font-family(@a) when (ispixel(@a)) and (@a <= 12) {
        @btn-font-family: @font-family-sans-serif;
     }
     .font-family(@a) when (default()) {
        @btn-font-family: @font-family-yahei;
     }
     .font-family(@font-size);
     padding: @padding-vertical @padding-horizontal;
     font-size: @font-size;
     line-height: @line-height;
     border-radius: @border-radius;
     font-family: @btn-font-family;
}

.btn-variant(@color, @bg-color, @border-color, @hover-color, @hover-bg-color, @hover-border-color){
    color: @color;
    background-color: @bg-color;
    border-color: @border-color;
    &:visited{
        color: @color;
    }
    &:hover{
        color: @hover-color;
        background-color: @hover-bg-color;
        border-color: @hover-border-color;
    }
}

.btn-styles(@color: #fff, @btn-color: #555) {
     #gradient > .vertical(@btn-color, darken(@btn-color, 12%), 0, 100%);
     .reset-filter(); // Disable gradients for IE9 because filter bleeds through rounded corners; see https://github.com/twbs/bootst>
     background-repeat: repeat-x;
     border-color: darken(@btn-color, 14%);
     color:@color;
     &:visited,
     &:hover,
     &:focus{
        color:@color;
        background-color: darken(@btn-color, 12%);
        background-position: 0 -15px;
     }
     &:active,
     &.active {
        color:@color;
        background-color: darken(@btn-color, 12%);
        border-color: darken(@btn-color, 14%);
     }
}
.font-size-12(){
    font-size: 12px;
}

.font-size-14(){
    font-size: 14px;
}

.font-size-16(){
    font-size: 16px;
}

.font-size-20(){
    font-size: 20px;
}

.font-weight-normal(){
    font-weight: normal;
}

.font-weight-bold(){
    font-weight: bold;
}

.font-family-sans-serif() {
    font-family: @font-family-sans-serif;    
}

.font-family-serif() {
    font-family: @font-family-serif;    
}

.font-family-sans-serif-only() {
    font-family: @font-family-sansOnly;    
}

.font-family-serif-fonly() {
    font-family: @font-family-serifOnly;    
}

.font-family-yahei() {
    font-family: @font-family-yahei;    
}

.font-family-mono() {
    font-family: @font-family-monospace;    
}

.h4(){
    .font-size-14();
    .font-weight-bold();
    .font-family-yahei();
}

.a-color(@link: @link-color; @hover: @link-color; @visited: @visited-color) {
    color: @link;
    &:visited {
        color: @visited;
    }
    &:hover,
    &:focus {
        color: @hover;
    }
}

.a-decoration(@link: none; @hover: underline){
    text-decoration: @link;
    &:visited {
        text-decoration: @link;
    }
    &:hover,
    &:focus {
        text-decoration: @hover;
    }
}

.line-height-22() {
    line-height: @line-height-normal;     
}

.line-height-26() {
    line-height: @line-height-lg;     
}
#gradient {
    .horizontal(@start-color; @end-color; @start-percent: 0; @end-percent: 100%) {
        // Standard, IE10, Firefox 16+, Opera 12.10+, Safari 7+, Chrome 26+
        background-image: linear-gradient(to right, @start-color @start-percent, @end-color @end-percent); 
        background-repeat: repeat-x;
        // IE9 and down
        filter: e(%("progid:DXImageTransform.Microsoft.gradient(startColorstr='%d', endColorstr='%d', GradientType=1)",argb(@start-color),argb(@end-color))); 
    }
    .vertical(@start-color; @end-color; @start-percent: 0; @end-percent:100%) {
        // Standard, IE10, Firefox 16+, Opera 12.10+, Safari 7+, Chrome 26+
        background-image: linear-gradient(to bottom, @start-color @start-percent, @end-color @end-percent); 
        background-repeat: repeat-x;
        // IE9 and down
        filter: e(%("progid:DXImageTransform.Microsoft.gradient(startColorstr='%d', endColorstr='%d', GradientType=1)",argb(@start-color),argb(@end-color))); 
    }
    .directional (@deg; @start-color; @end-color) {
        background-image: linear-gradient(@deg, @start-color, @end-color); 
    }
}

.reset-filter() {
    filter: e(%("progid:DXImageTransform.Microsoft.gradient(enabled = false)"));
}
@col-grid-width: 10px;
@col-grid-height: 2px;
@col-gutter-width: 10px;
@grid-columns: 49;

.make-grid-columns (@class) {
    .col(@index) {
        @item: ~".col-@{class}-@{index}";
        .col((@index+1); @item);
    }
    .col(@index, @list) when (@index =< @grid-columns) {
        @item: ~".col-@{class}-@{index}";
        .col((@index+1), ~"@{list}, @{item}")
    }
    .col(@index, @list) when (@index > @grid-columns) {
        @{list} {
            float: left;
            position: relative;
            min-height: 1px;
            padding-left: @col-gutter-width;
            padding-right: @col-gutter-width;
        }
    }
    .col(1);
}

.calc-grid-width (@index, @class) when (@index > 0){
    .col-@{class}-@{index}{
        width: (@col-grid-width + @col-gutter-width )* @index - @col-gutter-width; 
    } 
};

.loop-grid-columns (@index, @class) when (@index >= 0){
    .calc-grid-width (@index, @class);
    .loop-grid-columns((@index - 1), @class)
}

.make-grid-width(@class) {
    .loop-grid-columns(@grid-columns, @class);   
}

.make-horizontal(@col) when (isnumber(@col)) {
    width: unit(ceil(@col) * @col-grid-width, px); 
}

.make-vertical(@col) when (isnumber(@col)) {
    height: unit(ceil(@col) * @col-grid-width, px); 
}

.unit-px(@value) {
    @len: length(@value);
    .cal-args(@value) when (@len = 1) {
        @1st: @value * @col-grid-height;
        @2nd: @value * @col-grid-width;
        margin: @lst @2nd;
    }
    .cal-args(@value) when (@len = 2) {
        @1st: extract(@value, 2) * @col-grid-height;
        @2nd: extract(@value, 1) * @col-grid-width;
        margin: @lst @2nd;
    }
    .cal-args(@value) when (@len = 3) {
        @1st: extract(@value, 2) * @col-grid-height;
        @2nd: extract(@value, 1) * @col-grid-width;
        @3rd: extract(@value, 3) * @col-grid-height;
        margin: @lst @2nd @3rd;
    }
    .cal-args(@value) when (@len = 4) {
        @1st: extract(@value, 2) * @col-grid-height;
        @2nd: extract(@value, 1) * @col-grid-width;
        @3rd: extract(@value, 3) * @col-grid-height;
        @4th: extract(@value, 4) * @col-grid-width;
        margin: @lst @2nd @3rd @4th;
    }
    .cal-args(@value);
}

.unit-other(@value){
    @len: length(@value);
    .calc-args(@index) {
        @class: extract(@value, @index);
        @item: ~"@{class}";
        .calc-args((@index+1); @item);
    }
    .calc-args(@index, @list) when (@index =< @len) {
        @class: extract(@value, @index);
        @item: ~"@{class}";
        .calc-args((@index+1), ~"@{list} @{item}")
    }
    .calc-args(@index, @list) when (@index > @len) {
        margin: ~"@{list}";
    }
    .calc-args(1);
}

.box-modle(@args, @unit) {
    .unit (@unit) when (@unit = px) {
        .unit-px(@args, @unit);
    }
    .unit (@unit) when (default()) {
        .unit-other(@args);
    }
    .unit(@unit);
}

.margin(@args){
    .unit-other(@args);
}

.padding(@args, @unit){
    .box-modle(@args, @unit); 
}
.get-column-three(@namespace, @left, @right, @gutter: 10px){
    @{namespace}{
        .col3_left,
        .col3-left {
            width: @left;
            margin-left: -100%;
        }
        .col3_right,
        .col3-right {
            width: @right;
            margin-left: -@right;
        }
        .col3_main,
        .col3-main{
            margin-left: @left + @gutter;
            margin-right: @right + @gutter;
        }
    }
}


.get-column-two(@namespace, @left){
    @{namespace}{
        .col2_left,
        .col2-left{
            width: @left;     
        }
        .col2_right,
        .col2-right{
            margin-left: @left;
        }
    }
}

.get-equal-column-two(@namespace, @left, @left-color, @right-color, @min-height){
    @{namespace}{
        background-color: @left-color;
        .col2-left{
            float: left;
            width: @left;
            min-height: @min-height;
            background-color: @left-color;
        }
        .col2-right{
            margin-left: @left;
            min-height: @min-height;
            background-color: @right-color;
        }
    }
}.make-horizontal-media(@width, @height, @gutter){
    .media_left,
    .media-left{
        .size(@width, @height);
    }
    .media_right,
    .media-right {
        margin-left: @width + @gutter;
    }
}

.make-horizontal-media-border(@width, @height, @gutter, @padding:0, @border-width:0, @border-color: #ccc){
    .media_left,
    .media-left{
        .size(@width, @height);
        padding: @padding;
        border: @border-width solid @border-color;
    }
    .media_right,
    .media-right {
        margin-left: @width + @gutter + @border-width * 2 + @padding * 2;
    }
}

.make-vertical-media(@width, @height, @gutter){
    .media_top,
    .media-top {
        .size(@width, @height);
    }
    .media_bottom,
    .media-bottom {
        margin-top: @gutter;
    }
}

.make-horizontal-lists(@width, @h-gutter, @v-gutter: 0, @list-num){
    float: left;
    width: @width;
    margin-right: @h-gutter;
    margin-bottom: @v-gutter;
    &:nth-child(@{list-num}n){
        margin-right: 0;
    }
}

.make-vertical-lists(@height, @gutter){
    height: @height;
    margin-bottom: @gutter;
    &:last-child,
    &.last_child{
        margin-bottom: 0;
    }
}
.opacity (@opacity) {
    opacity: @opacity; 
    //ie8
    @opacity-ie: @opacity * 100;
    filter: ~"alpha(opacity=@{opacity-ie})";
}

.background-opacity(@color, @opacity) {
    @rgba-color: rgba(red(@color), green(@color), blue(@color), @opacity);
    background-color: @rgba-color;
    // Hack for IE8:
    background: none\9; // Only IE8
    filter: e(%("progid:DXImageTransform.Microsoft.gradient(startColorstr='%d', endColorstr='%d')", argb(@rgba-color),argb(@rgba-color))); // IE9 and down
    // Problem: Filter gets applied twice in IE9.
    // Solution:
    &:not([dummy]) {
        filter: progid:DXImageTransform.Microsoft.gradient(enabled='false'); // Only IE9
    }
}
.pagination-size(@padding-vertical; @padding-horizontal; @font-size){
    padding: @padding-vertical @padding-horizontal;
    font-size: @font-size;
}

.pagination-style(@background-color; @text-color; @background-hover-color; @text-hover-color; @border-color: none){
    .mix-border(@a) when (iscolor(@a)){
        border: 1px solid @border-color;
    }
    .mix-border(@a) when not (iscolor(@a)){
        border: 1px solid transparent;
    }
    background: @background-color;
    color: @text-color;
    .mix-border(@border-color);
    &:visited{
        color: @text-hover-color;
    }
    &:hover{
        background: @background-hover-color; 
        color: @text-hover-color;
        .mix-border(@border-color);
    }
}
/**
 * @desc 表格样式
 * @author zhangshibiao
 * @date  2015-05-11
 */

//  Table mixin 

.table-row-variant(@state; @background) {
  .table > thead > tr,
  .table > tbody > tr,
  .table > tfoot > tr {
    > td.@{state},
    > th.@{state},
    &.@{state} > td,
    &.@{state} > th {
      background-color: @background;
    }
  }

  /* Hover states for `.table-hover` Note: this is not available for cells or rows within `thead` or `tfoot`.*/
  .table-hover > tbody > tr {
    > td.@{state}:hover,
    > th.@{state}:hover,
    &.@{state}:hover > td,
    &:hover > .@{state},
    &.@{state}:hover > th {
      background-color: darken(@background, 5%);
    }
  }
}
.thumbnail-size(@width, @height){
    width: @width;
    height: @height;
}

.thumbnail-border-inset(@width, @height, @border-width, @border-color){
    &:before{
        width: @width - @border-width;
        height: @height - @border-width;
        border: @border-width solid @border-color;
    }
}
.triangle-base {
    display: inline-block;
    width: 0;
    height: 0;
    -moz-transform: scale(0.9999);
}

.triangle(@direction, @size, @color) {
    .triangle(@direction, @size * 2, @size, @color);
}

.triangle(@direction, @width, @height, @color) when (@direction = up) {
    &:extend(.triangle-base);
    border-left: (@width / 2) solid transparent;
    border-right: (@width / 2) solid transparent;
    border-bottom: @height solid @color;
}

.triangle(@direction, @width, @height, @color) when (@direction = down) {
    &:extend(.triangle-base);
    border-left: (@width / 2) solid transparent;
    border-right: (@width / 2) solid transparent;
    border-top: @height solid @color;
}

.triangle(@direction, @width, @height, @color) when (@direction = left) {
    &:extend(.triangle-base);
    border-top: (@height / 2) solid transparent;
    border-bottom: (@height / 2) solid transparent;
    border-right: @width solid @color;
}

.triangle(@direction, @width, @height, @color) when (@direction = right) {
    .triangle-base();
    border-top: (@height / 2) solid transparent;
    border-bottom: (@height / 2) solid transparent;
    border-left: @width solid @color;
}
.clearfix() {
    zoom:1;
    &:before,
    &:after {
       content: " "; 
       display: table; 
    }
    &:after {
        clear: both;
    }
}

.text-overflow(){
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
}

.text-overflow(@line-number){
    display: -webkit-box;
    -webkit-line-clamp: @line-number;
    -webkit-box-orient: vertical;
    overflow: hidden;
};

.user-select(@select) {
    user-select: @select;
}

.center-block(@top: 0, ...) {
    @len: length(@arguments);
    .center-inner-mixin(...) when (@len = 1) {
        @bottom: @top;
    }
    .center-inner-mixin(...) when (@len = 2) {
        @top: extract(@arguments, 1);
        @bottom: extract(@arguments, 2);
    }
    .center-inner-mixin(@arguments);
    display: block;
    margin: @top auto @bottom;
}

.center-text() {
    display: block;
    text-align: center;
}

.hide-text() {
    font: ~"0/0" a;
    color: transparent;
    text-shadow: none;
    background-color: transparent;
    border: 0;
}

.size(@width; @height) {
    width: @width;
    height: @height;
}

.square(@size) {
    .size(@size; @size);
}

.tab-focus() {
  outline: thin dotted;
  outline: 5px auto -webkit-focus-ring-color;
  outline-offset: -2px;
}

.box-sizing(@boxmodel) {
    box-sizing: @boxmodel;
}

.placeholder(@color: @input-color-placeholder) {
    &::-moz-placeholder {
        color: @color;
        opacity: 1;
    }
    &:-ms-input-placeholder {
        color: @color;
    }
    &::-webkit-input-placeholder {
        color: @color;
    }
}

.pull-left(){
    float: left !important;
}

.pull-right(){
    float: right !important;
}

.icon-sprite-multi(@list){
    @index: length(@list);
    .loop(@index) when (@index > 0){
        @text: e(extract(@list, @index));
        @value: extract(@text, 1);
        .icon-@{value}{
            display: inline-block;
            width: extract(@text, 2);
            height: extract(@text, 3);
            background: url("images/@{value}.png?__sprite");
        }
       .loop((@index - 1));
    }
    .loop(@index);
}

.icon-sprite-single(@list){
    @index: length(@list);
    .loop(@index) when (@index > 0){
        @value: e(extract(@list, @index));
        .icon-@{value}{
            background: url("images/@{value}.png?__sprite");
        }
       .loop((@index - 1));
    }
    .loop(@index);
}

.background-size(@image-url, @rest...){
    background-image: @image-url;
    background-size: @rest;
    filter: e(%("progid:DXImageTransform.Microsoft.AlphaImageLoader(src=%d, sizingMethod='scale')", @image-url));
}

@white-color: #fff;
@black-color: #000;
@gray: #666;
@gray-darker: #333;
@gray-lighter: #999;
@red-color: #f74d4a;
@orange-color: #f8984a;
@blue-color: #2d64b3;
@visited-color: #653096;

@text-color: @gray-darker;

@body-bg: #fff;



@link-color: @blue-color;
@link-hover-color: @blue-color;
@link-visited-color: @visited-color;
@link-hover-decoration: underline;

@font-family-sans-serif:  "Helvetica Neue", Helvetica, Arial, sans-serif;
@font-family-serif:       Georgia, "Times New Roman", Times, serif;
@font-family-monospace:   Menlo, Monaco, Consolas, "Courier New", monospace;
@font-family-yahei: "microsoft yahei" simhei sans-serif;
@font-family-sansOnly: sans-serif;
@font-family-serifOnly: sans-serif;
@font-family-base: @font-family-sans-serif;


@font-size-base: 14px;
@font-size-sm: 12px;
@font-size-lg: 16px;
@font-size-lger: 20px;
@usual-font-size: replace(~"@{font-size-base}", 'px', ''), 
                  replace(~"@{font-size-sm}", 'px', ''),
                  replace(~"@{font-size-lg}", 'px', ''),
                  replace(~"@{font-size-lger}", 'px', '');
@default-font-size: @font-size-base;

@font-weight-normal: normal;
@font-weight-bold: bold;
@usual-font-weight: ~"@{font-weight-normal}", ~"@{font-weight-bold}";

@line-height-normal: 22px; 
@line-height-lg: 26px; 
@default-line-height: @font-size-base;

@container-width: 980px;
@grid-width: 10px;
@grid-height: 2px;

@border-color: #e4e6eb;

@input-color-placeholder: #bcbcbc;

@nav-bg-hover-color: #1e2339;  
@nav-bg-color: #282d45;
@search-bg-color: #7e818f;

@li-hover-bg: #f7f9fc;

/*button component*/
@default-text: @white-color;
@default-bg: #398bfc;
@default-bg-hover-top: #3887fa;
@default-bg-hover-bottom: #3782f0;
@default-bg-hover: @default-bg-hover-top @default-bg-hover-bottom; 
@default-bg-active: #317ef3;
@default-border: #3782f0;
@default-border-hover: #296cee;
@default-border-active: #317ef3;
@default-shadow: #317ef3;

@attention-text: @white-color;
@attention-bg: #e64845;
@attention-bg-hover-top: #f64d4a;
@attention-bg-hover-bottom: #db4437;
@attention-bg-hover: @attention-bg-hover-top @attention-bg-hover-bottom;
@attention-bg-active: #d23c30;
@attention-border: #ad3331;
@attention-border-hover: #a50e0b;
@attention-border-active: #a50e0b;
@attention-shadow: #a50e0b;

@sub-text: @gray-darker;
@sub-bg: #fcfcfc, #f2f2f2;
@sub-bg-hover: #f8f8f8, #e9e9e9;
@sub-bg-active: #d8d8d8;
@sub-border: #ccc;
@sub-border-hover: #ababab;
@sub-border-active: @sub-border;
@sub-shadow: @sub-border;

@disable-text: @gray-lighter;
@disable-bg: #dfdfdf;
@disable-border: #dfdfdf;

@btn-link-text: @link-color;

/*pagination component*/
@default-item-border: none;
@default-item-bg: @white-color;
@default-item-text: @gray;
@default-item-bg-hover: #e9f1f7;
@default-item-text-hover: @gray;
@default-current-border: none;
@default-current-bg: #f7f7f7;
@default-current-text: @gray-darker;
@default-current-bg-hover: #f7f7f7;
@default-current-text-hover: @gray-darker;

/* form component */
@form-base-color: @gray-darker;
@form-group-line-height: 30px;
@form-control-line-height: 28px;
@form-group-margin: @grid-width;
@form-label-margin-right: @grid-width;
@form-control-padding: 8px;
@input-border-color: #e6e6e6;
@input-focus-border-color: #5c9dff;
@inline-input-margin-right: 20px;

/* table-component */

/* Padding for `<th>`s and `<td>`s. */
@table-cell-padding: 8px;

/* Padding for cells in `.table-condensed`. 紧凑型的padding*/
@table-condensed-cell-padding: 4px;

/* 表格默认背景*/
@table-bg: transparent;

/* Background color used for `.table-striped` 条纹背景色. */
@table-bg-accent: #f9f9f9;

/* Background color used for `.table-hover`.*/
@table-bg-hover: #f5f5f5;
@table-bg-active: @table-bg-hover;

/* Border color for table and cell borders.*/
@table-border-color: #ddd;

/* table margin-bottom */
@line-height-computed:20px; 
