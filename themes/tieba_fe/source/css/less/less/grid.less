@col-grid-width: 10px;
@col-grid-height: 2px;
@col-gutter-width: 10px;
@grid-columns: 49;

.make-grid-columns (@class) {
    .col(@index) {
        @item: ~".col-@{class}-@{index}";
        .col((@index+1); @item);
    }
    .col(@index, @list) when (@index =< @grid-columns) {
        @item: ~".col-@{class}-@{index}";
        .col((@index+1), ~"@{list}, @{item}")
    }
    .col(@index, @list) when (@index > @grid-columns) {
        @{list} {
            float: left;
            position: relative;
            min-height: 1px;
            padding-left: @col-gutter-width;
            padding-right: @col-gutter-width;
        }
    }
    .col(1);
}

.calc-grid-width (@index, @class) when (@index > 0){
    .col-@{class}-@{index}{
        width: (@col-grid-width + @col-gutter-width )* @index - @col-gutter-width; 
    } 
};

.loop-grid-columns (@index, @class) when (@index >= 0){
    .calc-grid-width (@index, @class);
    .loop-grid-columns((@index - 1), @class)
}

.make-grid-width(@class) {
    .loop-grid-columns(@grid-columns, @class);   
}

.make-horizontal(@col) when (isnumber(@col)) {
    width: unit(ceil(@col) * @col-grid-width, px); 
}

.make-vertical(@col) when (isnumber(@col)) {
    height: unit(ceil(@col) * @col-grid-width, px); 
}

.unit-px(@value) {
    @len: length(@value);
    .eval-args(@value) when (@len = 1) {
        @1st: @value * @col-grid-height;
        @2nd: @value * @col-grid-width;
        margin: @lst @2nd;
    }
    .eval-args(@value) when (@len = 2) {
        @1st: extract(@value, 2) * @col-grid-height;
        @2nd: extract(@value, 1) * @col-grid-width;
        margin: @lst @2nd;
    }
    .eval-args(@value) when (@len = 3) {
        @1st: extract(@value, 2) * @col-grid-height;
        @2nd: extract(@value, 1) * @col-grid-width;
        @3rd: extract(@value, 3) * @col-grid-height;
        margin: @lst @2nd @3rd;
    }
    .eval-args(@value) when (@len = 4) {
        @1st: extract(@value, 2) * @col-grid-height;
        @2nd: extract(@value, 1) * @col-grid-width;
        @3rd: extract(@value, 3) * @col-grid-height;
        @4th: extract(@value, 4) * @col-grid-width;
        margin: @lst @2nd @3rd @4th;
    }
    .eval-args(@value);
}

.unit-other(@value){
    @len: length(@value);
    .calc-args(@index) {
        @class: extract(@value, @index);
        @item: ~"@{class}";
        .calc-args((@index+1); @item);
    }
    .calc-args(@index, @list) when (@index =< @len) {
        @class: extract(@value, @index);
        @item: ~"@{class}";
        .calc-args((@index+1), ~"@{list} @{item}")
    }
    .calc-args(@index, @list) when (@index > @len) {
        margin: ~"@{list}";
    }
    .calc-args(1);
}

.box-modle(@args, @unit) {
    .unit (@unit) when (@unit = px) {
        .unit-px(@args, @unit);
    }
    .unit (@unit) when (default()) {
        .unit-other(@args);
    }
    .unit(@unit);
}

.margin(@args){
    .unit-other(@args);
}

.padding(@args, @unit){
    .box-modle(@args, @unit); 
}
